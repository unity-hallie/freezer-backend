#!/bin/bash
# Deployment Safety Script - Update Validation Only
# Validates existing database integrity for ongoing deployments
# NOTE: For first-time deployment setup, use first-time-deployment.sh

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "üõ°Ô∏è  DEPLOYMENT UPDATE VALIDATION"
echo "================================="
echo "‚ÑπÔ∏è  This script validates existing deployments only"
echo "‚ÑπÔ∏è  For first-time setup, run: ./first-time-deployment.sh"
echo ""

# Function to check database connectivity and basic integrity
check_database_health() {
    echo ""
    echo "üìä Database Health Check"
    echo "------------------------"
    
    # Check if we can connect to database
    if python3 -c "
import sys
sys.path.append('.')
from database import engine
import sqlalchemy as sa
try:
    with engine.connect() as conn:
        result = conn.execute(sa.text('SELECT 1 as test'))
        print('‚úÖ Database connection: OK')
    exit(0)
except Exception as e:
    print(f'‚ùå Database connection failed: {e}')
    exit(1)
" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Database connectivity verified${NC}"
    else
        echo -e "${RED}‚ùå Database connection failed - DEPLOYMENT BLOCKED${NC}"
        return 1
    fi
    
    # Check critical tables exist
    python3 -c "
import sys
sys.path.append('.')
from database import engine
import sqlalchemy as sa

critical_tables = ['users', 'households', 'items', 'locations']
try:
    with engine.connect() as conn:
        for table in critical_tables:
            result = conn.execute(sa.text(f'SELECT COUNT(*) FROM {table}'))
            count = result.scalar()
            print(f'‚úÖ Table {table}: {count} records')
    print('‚úÖ All critical tables verified')
except Exception as e:
    print(f'‚ùå Critical table check failed: {e}')
    exit(1)
" 2>/dev/null || {
        echo -e "${RED}‚ùå Critical tables missing - DEPLOYMENT BLOCKED${NC}"
        return 1
    }
    
    echo -e "${GREEN}‚úÖ Database health check passed${NC}"
    return 0
}

# Function to check migration status (validation only)
check_migration_status() {
    echo ""
    echo "üîÑ Migration Status Check"
    echo "-------------------------"
    
    # Check current migration status
    echo "Current migration status:"
    if python3 -m alembic current 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Migration status accessible${NC}"
    else
        echo -e "${RED}‚ùå Cannot access migration status - database may not be initialized${NC}"
        echo "‚ÑπÔ∏è  Run first-time-deployment.sh for initial setup"
        return 1
    fi
    
    # Check for pending migrations
    echo "Checking for pending migrations..."
    current=$(python3 -m alembic current --verbose 2>/dev/null | grep "Current revision" | cut -d' ' -f3 || echo "none")
    head=$(python3 -m alembic heads 2>/dev/null | cut -d' ' -f1 || echo "unknown")
    
    if [[ "$current" != "$head" ]] && [[ "$current" != "none" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Pending migrations detected${NC}"
        echo "‚ÑπÔ∏è  Current: $current, Latest: $head"
        echo "‚ÑπÔ∏è  Consider running migrations before deployment"
    else
        echo -e "${GREEN}‚úÖ Database is up to date${NC}"
    fi
    
    return 0
}

# Function to verify user session compatibility
check_session_compatibility() {
    echo ""
    echo "üë§ User Session Compatibility"
    echo "------------------------------"
    
    # Check if user authentication still works
    python3 -c "
import sys
sys.path.append('.')
from sqlalchemy.orm import sessionmaker
from database import engine
import models

try:
    Session = sessionmaker(bind=engine)
    with Session() as session:
        # Check if we can query users table
        user_count = session.query(models.User).count()
        print(f'‚úÖ User table accessible: {user_count} users')
        
        # Check if critical user fields exist
        if user_count > 0:
            user = session.query(models.User).first()
            required_fields = ['id', 'email', 'hashed_password', 'full_name']
            for field in required_fields:
                if hasattr(user, field):
                    print(f'‚úÖ Critical field {field}: exists')
                else:
                    print(f'‚ùå Critical field {field}: MISSING')
                    exit(1)
        
        print('‚úÖ User schema compatibility verified')
except Exception as e:
    print(f'‚ùå Session compatibility check failed: {e}')
    exit(1)
" 2>/dev/null || {
        echo -e "${RED}‚ùå User session compatibility failed - DEPLOYMENT BLOCKED${NC}"
        return 1
    }
    
    echo -e "${GREEN}‚úÖ User sessions will remain valid${NC}"
    return 0
}

# Function to verify data integrity
check_data_integrity() {
    echo ""
    echo "üîç Data Integrity Verification"
    echo "-------------------------------"
    
    python3 -c "
import sys
sys.path.append('.')
from sqlalchemy.orm import sessionmaker
from database import engine
import models

try:
    Session = sessionmaker(bind=engine)
    with Session() as session:
        # Check for orphaned data
        users = session.query(models.User).count()
        households = session.query(models.Household).count()
        items = session.query(models.Item).count()
        
        print(f'‚úÖ Data integrity: {users} users, {households} households, {items} items')
        
        # Check foreign key relationships are intact
        if items > 0:
            orphaned_items = session.query(models.Item).filter(
                ~models.Item.location_id.in_(
                    session.query(models.Location.id)
                )
            ).count()
            
            if orphaned_items > 0:
                print(f'‚ö†Ô∏è  Warning: {orphaned_items} items have invalid location references')
            else:
                print('‚úÖ Foreign key relationships intact')
        
        print('‚úÖ Data integrity verified')
        
except Exception as e:
    print(f'‚ùå Data integrity check failed: {e}')
    exit(1)
" 2>/dev/null || {
        echo -e "${YELLOW}‚ö†Ô∏è Data integrity warnings detected${NC}"
        # Don't block deployment for warnings, but log them
    }
    
    echo -e "${GREEN}‚úÖ Data integrity check completed${NC}"
    return 0
}

# Main validation sequence (update deployments only)
main() {
    echo "Starting deployment update validation..."
    echo "Environment: ${ENVIRONMENT:-development}"
    echo ""
    
    # Validation-only checks
    if ! check_database_health; then
        echo -e "${RED}‚ùå Database health check failed${NC}"
        echo "‚ÑπÔ∏è  If this is your first deployment, run: ./first-time-deployment.sh"
        exit 1
    fi
    
    if ! check_migration_status; then
        echo -e "${RED}‚ùå Migration status check failed${NC}"
        echo "‚ÑπÔ∏è  Database may not be initialized. Run: ./first-time-deployment.sh"
        exit 1
    fi
    
    if ! check_session_compatibility; then
        echo -e "${RED}‚ùå Session compatibility check failed${NC}"
        exit 1
    fi
    
    if ! check_data_integrity; then
        # Data integrity is warning-level, not blocking
        echo -e "${YELLOW}‚ö†Ô∏è Data integrity warnings present but deployment can continue${NC}"
    fi
    
    echo ""
    echo -e "${GREEN}üéâ DEPLOYMENT UPDATE VALIDATION PASSED${NC}"
    echo "======================================"
    echo "‚úÖ Existing database is healthy and accessible"
    echo "‚úÖ Migration status verified"
    echo "‚úÖ User sessions will remain compatible"
    echo "‚úÖ No data corruption detected"
    echo "‚úÖ Safe to proceed with update deployment"
    echo ""
    echo "‚ÑπÔ∏è  Remember: This script only validates existing deployments"
    echo "‚ÑπÔ∏è  For first-time setup, use: ./first-time-deployment.sh"
    
    return 0
}

# Run main function
main "$@"